{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\M\\\\Desktop\\\\projeto_metas\\\\site\\\\pages\\\\cadastrar.js\",\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState } from 'react'; //import Menu from '../components/Menu';\n\nimport { Jumbotron, Container, Button, Form, FormGroup, Label, Input, Alert } from 'reactstrap';\n\nfunction Cadastrar() {\n  _s();\n\n  //Atribui todos os campos do formulário ainda vazios em uma constante\n  var _useState = useState({\n    name: '',\n    description: '',\n    status: ''\n  }),\n      meta = _useState[0],\n      setMeta = _useState[1];\n\n  var _useState2 = useState({\n    formSave: false,\n    type: '',\n    message: ''\n  }),\n      response = _useState2[0],\n      setResponse = _useState2[1]; //Conforme digita, o value do input do HTML é preenchido e guardado na constante abaixo\n\n\n  var onChangeInput = function onChangeInput(e) {\n    return setMeta(_objectSpread(_objectSpread({}, meta), {}, _defineProperty({}, e.target.name, e.target.value)));\n  }; //Função sendMeta é rodada após clicar no botão Enviar. O preventDefault impede de recarregar a página se houver erro após clicar em salvar. Após isso, envia os dados preenchidos para a API\n\n\n  var sendMeta = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(e) {\n      var res, responseEnv;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              e.preventDefault();\n              setResponse({\n                formSave: true\n              }); //Tenta a conexão com a API do backend e define o método de envio POST e em formato JSON\n\n              _context.prev = 2;\n              _context.next = 5;\n              return fetch('http://localhost:8080/metas', {\n                method: 'POST',\n                body: JSON.stringify(meta),\n                headers: {\n                  'Content-Type': 'application/json'\n                }\n              });\n\n            case 5:\n              res = _context.sent;\n              _context.next = 8;\n              return res.json();\n\n            case 8:\n              responseEnv = _context.sent;\n\n              if (responseEnv.error) {\n                setResponse({\n                  formSave: false,\n                  type: 'error',\n                  message: responseEnv.message\n                });\n              } else {\n                setResponse({\n                  formSave: false,\n                  type: 'success',\n                  message: responseEnv.message\n                });\n              }\n\n              _context.next = 15;\n              break;\n\n            case 12:\n              _context.prev = 12;\n              _context.t0 = _context[\"catch\"](2);\n              setResponse({\n                formSave: false,\n                type: 'error',\n                message: 'Erro: Meta não cadastrada com sucesso, tente mais tarde!'\n              });\n\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[2, 12]]);\n    }));\n\n    return function sendMeta(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Jumbotron, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Cadastrar Meta\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 36\n      }, this), response.type === 'error' ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: response.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 42\n      }, this) : \"\", response.type === 'success' ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: response.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 44\n      }, this) : \"\", /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: sendMeta,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Nome \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"name\",\n          id: \"name\",\n          placeholder: \"Nome da Meta\",\n          onChange: onChangeInput\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 23\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Descri\\xE7\\xE3o \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"description\",\n          id: \"description\",\n          placeholder: \"Descri\\xE7\\xE3o da Meta\",\n          onChange: onChangeInput\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 23\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Status \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"status\",\n          id: \"status\",\n          placeholder: \"Status da Meta\",\n          onChange: onChangeInput\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 23\n        }, this), response.formSave ? /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          disabled: true,\n          children: \"Enviando...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 21\n        }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Cadastrar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Cadastrar, \"41Q4vQ6JvBR+6Bb9al1pE3jQyCk=\");\n\n_c = Cadastrar;\nexport default Cadastrar;\n\nvar _c;\n\n$RefreshReg$(_c, \"Cadastrar\");","map":{"version":3,"sources":["C:/Users/M/Desktop/projeto_metas/site/pages/cadastrar.js"],"names":["React","useState","Jumbotron","Container","Button","Form","FormGroup","Label","Input","Alert","Cadastrar","name","description","status","meta","setMeta","formSave","type","message","response","setResponse","onChangeInput","e","target","value","sendMeta","preventDefault","fetch","method","body","JSON","stringify","headers","res","json","responseEnv","error"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\r\n\r\n//import Menu from '../components/Menu';\r\n\r\nimport { Jumbotron, Container, Button, Form, FormGroup, Label, Input, Alert } from 'reactstrap';\r\n\r\n\r\nfunction Cadastrar(){\r\n\r\n    //Atribui todos os campos do formulário ainda vazios em uma constante\r\n    const [meta, setMeta] = useState({\r\n        name: '',\r\n        description: '',\r\n        status: '',\r\n    });\r\n\r\n    const [response, setResponse] = useState({\r\n        formSave: false,\r\n        type: '',\r\n        message: ''\r\n    });\r\n\r\n    //Conforme digita, o value do input do HTML é preenchido e guardado na constante abaixo\r\n    const onChangeInput = e => setMeta({ ...meta, [e.target.name]: e.target.value});\r\n\r\n    //Função sendMeta é rodada após clicar no botão Enviar. O preventDefault impede de recarregar a página se houver erro após clicar em salvar. Após isso, envia os dados preenchidos para a API\r\n    const sendMeta = async e => {\r\n        e.preventDefault();\r\n        setResponse({ formSave: true });\r\n\r\n        //Tenta a conexão com a API do backend e define o método de envio POST e em formato JSON\r\n        try{\r\n            const res = await fetch('http://localhost:8080/metas', {\r\n                method: 'POST',\r\n                body: JSON.stringify(meta),\r\n                headers: {'Content-Type': 'application/json'}\r\n            });\r\n\r\n            //Se não conseguir fazer a conexão com a API, retorna um erro.\r\n            const responseEnv = await res.json();\r\n            if(responseEnv.error){\r\n                setResponse({\r\n                    formSave: false,\r\n                    type: 'error',\r\n                    message: responseEnv.message\r\n                });\r\n            }else{\r\n                setResponse({\r\n                    formSave: false,\r\n                    type: 'success',\r\n                    message: responseEnv.message\r\n                });\r\n            }\r\n\r\n        } catch{\r\n            setResponse({\r\n                formSave: false,\r\n                type: 'error',\r\n                message: 'Erro: Meta não cadastrada com sucesso, tente mais tarde!'\r\n            });\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Jumbotron>\r\n            <h1>Cadastrar Meta</h1><hr />\r\n\r\n            {response.type === 'error' ? <p>{response.message}</p> : \"\"}\r\n            {response.type === 'success' ? <p>{response.message}</p> : \"\"}\r\n\r\n            <form onSubmit={sendMeta}>\r\n                <label>Nome </label>\r\n                <input type=\"text\" name=\"name\" id=\"name\" placeholder=\"Nome da Meta\" onChange={onChangeInput} />\r\n                <br /><br />\r\n                <label>Descrição </label>\r\n                <input type=\"text\" name=\"description\" id=\"description\" placeholder=\"Descrição da Meta\" onChange={onChangeInput} />\r\n                <br /><br />\r\n                <label>Status </label>\r\n                <input type=\"text\" name=\"status\" id=\"status\" placeholder=\"Status da Meta\" onChange={onChangeInput} />\r\n                <br /><br />\r\n\r\n                {response.formSave ? \r\n                    <button type=\"submit\" disabled>Enviando...</button> : \r\n                    <button type=\"submit\">Cadastrar</button>\r\n                }\r\n\r\n            </form>\r\n            </Jumbotron>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cadastrar;"]},"metadata":{},"sourceType":"module"}